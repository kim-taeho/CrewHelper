# Generated by Django 2.2.7 on 2019-11-22 05:54

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, upload_to='')),
                ('gender', models.CharField(blank=True, choices=[('male', '남성'), ('female', '여성')], max_length=10)),
                ('bio', models.TextField(default='')),
                ('major', models.CharField(blank=True, choices=[('글로벌지역학', '글로벌지역학'), ('EU전공', 'EU전공'), ('GlobalBusiness', 'GlobalBusiness'), ('TESOL영어학전공', 'TESOL영어학전공'), ('광고PR브랜딩전공', '광고PR브랜딩전공'), ('교육학', '교육학'), ('국가리더전공', '국가리더전공'), ('국제금융학과', '국제금융학과'), ('국제스포츠레저전공', '국제스포츠레저전공'), ('그리스불가리아학과', '그리스불가리아학과'), ('남아프리카어전공', '남아프리카어전공'), ('독일어통번역학과', '독일어통번역학과'), ('동아프리카어전공', '동아프리카어전공'), ('동유럽학대학', '동유럽학대학'), ('러시아학과', '러시아학과'), ('루마니아어과', '루마니아어과'), ('말레이인도네시아어통번역학과', '말레이인도네시아어통번역학과'), ('문화콘텐츠학전공', '문화콘텐츠학전공'), ('바이오메디컬공학전공', '바이오메디컬공학전공'), ('방송영상뉴미디어전공', '방송영상뉴미디어전공'), ('브라질학과', '브라질학과'), ('사학과', '사학과'), ('산업경영공학과', '산업경영공학과'), ('생명공학과', '생명공학과'), ('서아프리카어전공', '서아프리카어전공'), ('세계문화예술경영전공', '세계문화예술경영전공'), ('세르비아크로아티아어과', '세르비아크로아티아어과'), ('수학과', '수학과'), ('스페인어통번역학과', '스페인어통번역학과'), ('아랍어통번역학과', '아랍어통번역학과'), ('아프리카학부', '아프리카학부'), ('언론정보전공', '언론정보전공'), ('언어인지과학과', '언어인지과학과'), ('영미권통상통번역전공', '영미권통상통번역전공'), ('영미문학번역전공', '영미문학번역전공'), ('영어통번역학부', '영어통번역학부'), ('영어통번역학전공', '영어통번역학전공'), ('우크라이나어과', '우크라이나어과'), ('융복합소프트웨어전공', '융복합소프트웨어전공'), ('이탈리아어통번역학과', '이탈리아어통번역학과'), ('인도학과', '인도학과'), ('일본어통번역학과', '일본어통번역학과'), ('전자공학과', '전자공학과'), ('전자물리학과', '전자물리학과'), ('정보기록학전공', '정보기록학전공'), ('정보통신공학과', '정보통신공학과'), ('정치외교학과', '정치외교학과'), ('중국어통번역학과', '중국어통번역학과'), ('중앙아시아학과', '중앙아시아학과'), ('지식콘텐츠전공', '지식콘텐츠전공'), ('철학과', '철학과'), ('체코슬로바키아어과', '체코슬로바키아어과'), ('컴퓨터전자시스템공학전공', '컴퓨터전자시스템공학전공'), ('태국어통번역학과', '태국어통번역학과'), ('통계학과', '통계학과'), ('폴란드어과', '폴란드어과'), ('프랑스학과', '프랑스학과'), ('한국학과', '한국학과'), ('행정학과', '행정학과'), ('헝가리어과', '헝가리어과'), ('화학과', '화학과'), ('환경학과', '환경학과')], max_length=20)),
                ('login_method', models.CharField(choices=[('email', 'EMAIL'), ('kakao', 'KAKAO')], default='email', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
